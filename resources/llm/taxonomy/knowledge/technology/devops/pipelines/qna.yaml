version: 2
task_description: 'Teach the model about jenkins and tekton'
created_by: na-launch
domain: devops
seed_examples:
  - question: What is a Jenkins Pipeline?
    answer: |
      A Jenkins pipeline is a set of automated processes in Jenkins, a popular open-source automation
      server, that allows you to define the stages and steps of your software delivery process (like
      building, testing, and deploying code) in a continuous integration/continuous delivery (CI/CD)
      pipeline. Jenkins pipelines are used to automate the workflow of building, testing, and
      deploying applications in a repeatable, efficient, and consistent manner.
  - question: What is a Tekton Pipeline?
    answer: |
      A Tekton pipeline is a Kubernetes-native CI/CD (Continuous Integration and Continuous
      Delivery) framework that allows you to define, manage, and run pipelines for automating
      software delivery processes. It provides a set of Kubernetes resources for creating and
      managing pipelines, enabling developers to define the steps involved in building, testing,
      and deploying applications in a Kubernetes environment.
  - question: How can Tekton help with scaling the CI/CD pipelines that Jenkins may struggle with?
    answer: |
      Tekton natively runs on Kubernetes, meaning it benefits from Kubernetes built-in scaling
      and resource management capabilities. Unlike Jenkins, which may require additional
      setup (like managing multiple Jenkins agents), Tekton pipelines can scale automatically
      by running tasks in parallel across multiple pods in the Kubernetes cluster.
      This means:
      - **Elastic Scalability**: As the demand grows (more code commits, more builds), Tekton
        can spin up more pods to handle the increased load.
      - **Resource Efficiency**: Tekton allows you to define resource limits (CPU/memory)
        for each task, making it easier to optimize resource usage.
      - **Faster Execution**: Since tasks are containerized and Kubernetes manages the execution
        across nodes, Tekton pipelines can potentially run faster than Jenkins pipelines, which
        may require manual resource management or additional infrastructure like Jenkins agents.
  - question: How do Jenkins pipeline stages translate to Tekton pipelines?
    answer: |
      In Jenkins, pipelines are defined in stages, and each stage contains steps that perform
      the actual work. In Tekton, pipelines are similarly defined in stages, but they are
      called **tasks**, and each task runs in a separate Kubernetes pod. Here's how you can
      map Jenkins pipeline stages to Tekton tasks:
      - **Jenkins Stage** → **Tekton Task**:
         Each Jenkins stage becomes a Tekton task. For example, a `build` stage in Jenkins
         would become a `build-task` in Tekton. Each task can be modular and reused in other pipelines.
      - **Jenkins Steps** → **Tekton Task Steps**:
         In Jenkins, a stage contains individual steps (e.g., commands or scripts). In Tekton,
         each step in a task represents a container running a command or script. Tekton tasks
         can contain multiple steps, each defined with its own container.
      - **Jenkins Pipeline Environment Variables** → **Tekton PipelineParams**:
         Jenkins environment variables used within stages can be translated into **PipelineParams**
         in Tekton, which allow passing values between tasks.
      Example:
      Jenkins pipeline stage:
      ```groovy
          stage('Build') {
            steps {
              script {
                sh 'make build'
              }
            }
          }
      ```
      Tekton task:
      ```yaml
        apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: build-task
        spec:
          steps:
            - name: build
              image: golang:1.16
              script: |
                make build
      ```
  - question: How do pipeline triggers work in Tekton compared to Jenkins?
    answer: |
      In Jenkins, triggers are typically set up through **webhooks** or cron jobs. A webhook
      is used to trigger a Jenkins job when something happens (e.g., a code commit). Jenkins
      also supports cron-based triggers for scheduled builds.
      In Tekton, pipeline triggers are more event-driven and use the **Tekton Triggers**
      component. Tekton Triggers allow you to define events.
document:
  repo: https://github.com/na-launch/jenkins-to-tekton.git
  commit: 95b3f2d64def840c682b1e6aaa939dc611daf3de
  patterns:
    - jenkins.md
    - tekton.md
